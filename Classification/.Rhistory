shiny::runApp('~/GitHub/ScientificProgramming')
runApp('~/GitHub/ScientificProgramming')
runApp('~/GitHub/ScientificProgramming')
runApp('~/GitHub/ScientificProgramming')
runApp('~/GitHub/ScientificProgramming')
runApp('~/GitHub/ScientificProgramming')
runApp('~/GitHub/ScientificProgramming')
wd <- getwd()
# Clear working environment
rm(list = ls())
# Set path to the project folder
homeDir <- "C:/Users/Gebruiker/Documents/GitHub/ScientificProgramming"
# Required packages
CRANpackages <- c("tidyverse",     # Data formatting and plotting
"prospectr",     # Kennard-Stone algorithm
"caret",         # Create machine learning workflow
"glmnet",        # Construct elastic net model
"gridExtra",     # Combine images in single plot
"grid",          # Add elements to the combined image
"UBL")           # Adasyn algorithm for class imbalance
# Install (if not yet installed) and load the required CRAN packages:
for (pkg in CRANpackages) {
if (!requireNamespace(pkg, quietly = TRUE))
install.packages(pkg, ask = FALSE)
require(as.character(pkg), character.only = TRUE)
}
# Set working directory to the pre-processing folder
setwd(paste0(homeDir, "/Classification"))
rm(list = ls())
load("modelInfo.Rdata")
n_features = 4
#Exclude the 27 worst features: after removing more than 24 features the CV accuracy decreases
excludedFeatures <- modelInfo$removedFeature[1:(30 - n_features)]
trainingData_filtered <- trainingData_scaled[,!(colnames(trainingData_scaled) %in% excludedFeatures)]
save(trainingData_filtered, file = "trainingData_filtered.RData")
n_features = 4
excludedFeatures <- modelInfo$removedFeature[1:(30 - n_features)]
load("trainingData.RData")
load("trainingClass.RData")
load("testData.RData")
load("testClass.RData")
trainingData_filtered <- trainingData_scaled[,!(colnames(trainingData_scaled) %in% excludedFeatures)]
# Scale training data
trainingData_scaled <- t((t(trainingData) - rowMeans(t(trainingData)))/(apply(t(trainingData),1,sd)))
trainingData_filtered <- trainingData_scaled[,!(colnames(trainingData_scaled) %in% excludedFeatures)]
# save filtered training data
save(trainingData_filtered, file = "trainingData_filtered.RData")
View(trainingData_scaled)
View(trainingData_filtered)
colMeans(trainingData_filtered)
apply(trainingData_filtered,2,sd)
colMeans(trainingData)
colnames(trainingData_filtered)
colMeans(trainingData[, c("radius_worst","texture_worst","perimeter_worst","smoothness_worst")])
apply(trainingData[, c("radius_worst","texture_worst","perimeter_worst","smoothness_worst")],2,sd)
runApp('~/GitHub/ScientificProgramming')
runApp('~/GitHub/ScientificProgramming')
library(caret)
runApp('~/GitHub/ScientificProgramming')
